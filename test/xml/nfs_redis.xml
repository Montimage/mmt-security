<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="properties.xsl"?>
<!-- MMT_Security Copyright (C) 2014  Montimage-->
<beginning>
	<!-- Simple multi-session, multi-probe property  ip.src != ip.dst-->
	
<embedded_functions><![CDATA[

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>
#include "types_defs.h"
#include "hiredis/hiredis.h"
#include <sys/time.h>


/**
* Return:
* - 0: ok
* - 1: invalid
* - 2: NULL
*/

static inline int em_check_nfs_redis(const char *p_payload, double payload_len){
	printf("entering the EM\n");
	//return 0;
	
    if(p_payload == NULL){
    return 2;
  }
  
  //printf("Payload: %s\n", p_payload);
  
  size_t len = payload_len;
  char *str  = malloc( len + 1 );
  memcpy( str, p_payload, len );
  str[ len ] = '\0'; 
  
  
  redisContext *c, *command;
  redisReply *reply;
  
  const char *hostname = "127.0.0.1";
  //const char *hostname = "192.168.0.37";
  int port = 6379;
  
  struct timeval timeout = { 1, 500000 }; // 1.5 seconds
  c = redisConnectWithTimeout(hostname, port, timeout);
  if (c == NULL || c->err) {
        if (c) {
            printf("Connection error: %s\n", c->errstr);
            redisFree(c);
        } else {
            printf("Connection error: Impossible to allocate redis context\n");
        }
        exit(0);
    }
  
    /* Let's check what we have inside the list */
    reply = redisCommand(c,"LRANGE multisession.report 0 -1");
    if (reply->type == REDIS_REPLY_ARRAY) {
 		int j=0;
        for (j = 0; j < reply->elements; j++) {
			//printf("report: %s\n", reply->element[j]->str);
            char f_name[30], probe_report[256];
            char *token;
            strcpy(probe_report, reply->element[j]->str);
            token = strtok(reply->element[j]->str, ",");
            int i = 0;
			while (token != NULL) {
				if (i==1) {
					//check the validity of the report
					struct timeval now;
					gettimeofday(&now, NULL);
					char *_token;
					char timestamp[30];
					strcpy(timestamp, token);
					token = strtok(NULL, ",");
					_token = strtok(timestamp, ".");
					i++;
					if (_token != NULL){
						//printf("Timestamp: %s\n", _token);
						if (now.tv_sec - atoi(_token) > 300) {
							redisCommand(c,"LREM multisession.report 1 %s", probe_report);
							printf("Delete the outdated report %s\n", probe_report);
							continue;
							}
						}
					}
				if (i==2){
					strcpy(f_name, token);
					printf("%s\n", f_name);
					}
				token = strtok(NULL, ",");
				i++;
				}
			printf("Payload: %s\n", str);
			if (strstr(str, f_name) != NULL){
			printf ("Detected\n");
			redisFree(c);
			free(str);
			return 1;
			}            
        }
    }
  redisFree(c);
  free(str);
  return 0;
}
]]></embedded_functions>

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="2" type_property="ATTACK" 
    description="Upload a file comming from NFS server (detection based on two probes)">
    <event value="COMPUTE" event_id="1" 
           description="Context: HTTP packet"
           boolean_expression="((ip.src != ip.dst) &amp;&amp; (http.packet_count != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP payload contains the file comming from NFS server"
           boolean_expression="(#em_check_nfs_redis(tcp.p_payload, tcp.payload_len) == 1)"/>
</property>
</beginning>
