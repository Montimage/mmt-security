<beginning>
<embedded_functions><![CDATA[
//each function name should be prefixed by em_
#define _GNU_SOURCE
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>
#include "types_defs.h"
#include <sys/time.h>
#include "hash_table_botcc.h"
/**
* Return:
* - 0: ok
* - 1: invalid
* - 2: NULL
*/

static inline int em_check_botnetcc(const char *ipsrc, const char *ipdst){
	int i = 0, handle = 0;
	
	//extract ip_src, ip_dst
   	char *ip_src = (char *)malloc(sizeof(char)*16);
   	char *ip_dst = (char *)malloc(sizeof(char)*16);
    sprintf(ip_src,"%d.%d.%d.%d", (unsigned char)ipsrc[0], (unsigned char)ipsrc[1], (unsigned char)ipsrc[2], (unsigned char)ipsrc[3]);
    ip_src[15]='\0';
   	sprintf(ip_dst,"%d.%d.%d.%d", (unsigned char)ipdst[0], (unsigned char)ipdst[1], (unsigned char)ipdst[2], (unsigned char)ipdst[3]);
   	ip_dst[15]='\0';
   	//printf("IP src: %s. IP dst: %s\n", ip_src, ip_dst);
   	//printf("src->key: %ld, src->data:%s\n", (ipStr2DataItem(ip_src))->key, (ipStr2DataItem(ip_src))->data);
	
	
	//store signatures in a hash table
	FILE *f_in;
	f_in = fopen("test/hoa/botcc_ip","r");
	if (f_in == NULL)
        exit(EXIT_FAILURE);
        
	char * line = (char *) malloc(sizeof(char)*16);
    size_t len = 0;
    ssize_t read;
    
	while ((read = getline(&line, &len, f_in)) != -1) {
		//printf("Lines: %s", line);
        struct DataItem* item = ipStr2DataItem(line);
   		if (insert(item) == 0) printf("Insert failed\n");
		}
    free(line);
    fclose(f_in);
   
   if((search(ipStr2DataItem(ip_src)->key) != NULL) || (search(ipStr2DataItem(ip_dst)->key) != NULL)) handle = 1;
	
   //free everything before quitting
   free(ip_src);
   free(ip_dst);
   for (i=0; i<SIZE; i++){
	   if (hashArray[i] != NULL) {
		   free(hashArray[i]->data);
		   free(hashArray[i]);
		   hashArray[i] = NULL;
	   	   }
   	   }
   return handle;
}
]]></embedded_functions>
<!-- Property 31: Botnet Command and Control detection based on blaclisted IP addresses-->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="31" type_property="ATTACK" 
    description="Botnet Command and Control detection"
    >
   <event value="COMPUTE" event_id="1" 
           description="IP source or IP dest is a bot"
           boolean_expression="(#em_check_botnetcc(ip.src, ip.dst) == 1)"/>
    <event value="COMPUTE" event_id="2" 
           description="IP packet"
           boolean_expression="(ip.src !=ip.dst)"/>
</property>
</beginning>


