<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- MMT_Security Copyright (C) 2016-->
<beginning>

<embedded_functions><![CDATA[
//each function name should be prefixed by em_

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>
#include "types_defs.h"

static inline int check_ip_options(const char *op2, const char *op1){
  int handle = 0;
  
  int i2 = *((int*)op2);
  int i1 = *((int*)op1);
  int bit2 = (i2 >> 1) & 1;
  int bit1 = (i1 >> 1) & 1;
//  if(bit2 == 1 || bit1 == 1){
      if(i2 != i1) handle = 1;
//  }
  return handle;
}


static inline int check_port(int i){
  
  //printf("Port:%d\n", i);
  //according to: 
  //https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
  //and
  //https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt

  if(i<1023) return 0;
  if(i>49151 && i< 65536) return 0;
  if(i>65535) return 1;

  if(i>2193 && i<2197) return 1;
  if(i>4488 && i<4500) return 1;
  if(i>4953 && i<4969) return 1;
  if(i>5569 && i<5573) return 1;
  if(i>5646 && i<5670) return 1;
  if(i>6657 && i<6665) return 1;
  if(i>7491 && i<7500) return 1;
  if(i>7784 && i<7790) return 1;
  if(i>27999 && i<28119) return 1;
  if(i>5554 && i<5558) return 1;
  if(i>5999 && i<6064) return 1;
  if(i>8615 && i<8665) return 1;
  if(i>8801 && i<8804) return 1;
  if(i>8887 && i<8891) return 1;
  if(i>11430 && i<11489) return 1;
  if(i>11623 && i<11720) return 1;
  if(i>27009 && i<27345) return 1;
  if(i>41797 && i<42508) return 1;
  if(i>44444 && i<44544) return 1;
  switch (i) {
    case 78:
    case 79:
    case 100:
    case 106:
    case 787:
    case 1053:
    case 1491:
    case 2662:
    case 3060:
    case 3131:
    case 3145:
    case 3300:
    case 3301:
    case 4045:
    case 4315:
    case 4443:
    case 4967:
    case 5151:
    case 5152:
    case 5162:
    case 5444:
    case 5555:
    case 5556:
    case 6100:
    case 6200:
    case 6501:
    case 8882:
    case 9001:
    case 6632:
    case 7001:
    case 7002:
    case 7005:
    case 7011:
    case 7012:
    case 7501:
    case 7777:
    case 8001:
    case 16000:
    case 49151:
      return 1;
    default:
      return 0;
  }
  return 0;
}

/**
* Return:
* - 0: ok
* - 1: invalid
* - 2: NULL
*/
static inline int check_URI(const char *uri_str){
  int handle = 0;
  if(uri_str == NULL){
    return 2;
  }
 
  const char *x = uri_str;
  
  //fprintf(stderr, "%s\n",x);
  while (*x != '\0'){
      //octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
      if(*x < 32 || *x == 92 || *x == '"' || *x == '<' || *x == '>' || *x == '[' || *x == ']' || *x == '^' || *x == '`' || *x == '{' || 
         *x == '|' || *x == '}' || *x == '%' || *x > 126) {
              handle = 1;
              break;
      }
      x = x+1;
  }
  //detect directory traversal attack
  char *s0, *s1, *s2, *s3;
  s0 = strstr(uri_str, ".."); //find the first occurrence of string ".." in string
  s1 = strstr(uri_str, "./"); //find the first occurrence of string "./" in string
  s2 = strstr(uri_str, "//"); //find the first occurrence of string "//" in string
  s3 = strstr(uri_str, "/."); //find the first occurrence of string "//" in string
  
  if ((s0 !=NULL) || (s1 !=NULL) || (s2 !=NULL) || (s3 !=NULL))  
   handle = 1;
   
//#ifdef DEBUG
//  fprintf(stderr, "executing ceck_URI with parameters:h=%d:nb=%u:a1=%o:a2=%o\n", 
//                                           handle, *(char*)(BLOC3+6),*(char*)(BLOC3+9));
//#endif
  return handle;
}

/*
 * Nikto 
 */
static inline bool check_UA( const char *user_agent){
   //find the first occurrence of string "Nikto" in string
   return (strstr(user_agent, "Nikto") != NULL);     
}
static inline int check_sql_injection(const void *p_payload, double payload_len){
   int key_word_len = 6;
   char *key_words[6] = {"DROP", "UNION", "SELECT", "CHAR", "DELETE", "INSERT"};
   size_t len = payload_len, i;
   char *str  = malloc( len + 1 );
   memcpy( str, p_payload, len );
   str[ len ] = '\0';
   
   //Signature based dection begin here. 
   //(using  pattern matching techniques against signatures and 
   //keyword-based stores to identify potentially malicious requests)
   for( i=0; i<key_word_len; i++)
      if( strstr(str, key_words[i]  ) != NULL ){
         printf( key_words[i] );
         free( str );
         return 1;
      }
      
   
   free( str );
   return 0;
}


int check_http_response(const char* p){
  if(p == NULL){
    return 1;
  }
  return 0;
}

int check_ip_add(const char *src, const char *dst, const char *src1, const char *dst1){
  if((src == NULL) || (dst == NULL) || (src1 == NULL) || (dst1 == NULL)){
    return 1;
  }
  if (((src = src1) && (dst = dst1)) || ((src = dst1) && (dst = src1))){
     return 1;
  }
  return 0;
}

]]></embedded_functions>

<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->


<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
<!-- Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>

<!-- Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.1))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->


<!-- 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP options"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(#check_ip_options(ip.options,ip.options.1) == 1))))"/>
</property>

<!-- C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03f : HTTP detecte avec un port different de 80 et 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03h : La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03h: IP packet size and eth payload size not coherent.">
    <event value="COMPUTE" event_id="1" 
           description="Paquet size"
           boolean_expression="((meta.packet_len &lt; 34)&amp;&amp;(ip.tot_len &gt; 0))"/>
       <!--boolean_expression="(meta.packet_len == ethernet.packet_count)"/-->
       <!--boolean_expression="((ip.mf_flag == 0)&amp;&amp;(meta.packet_len != (eth.packet_count + 14)))"/-->
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03c|d|e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_03c|d|e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3b : Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="((#check_port(tcp.dest_port) == 1)||(#check_port(tcp.src_port) == 1))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;((tcp.dest_port + tcp.src_port) != 0))"/>
</property>

<!-- C4_Analyse_02 : Web scan with Nikto. User-Agent based detection
           boolean_expression="((http.user_agent == '')||(#check_UA(http.user_agent) == 1))"/>
-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an  user agent in the HTTP header"
           boolean_expression="(#check_UA(http.user_agent) == 1)"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(ip.src != ip.dst)"/>
 </property>


 <!-- C4_Analyse_02 : Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses."
    >
    <!--if_satisfied="py_createstix(5_two_successive_TCP_SYN_requests_could_be_a_spoofed_address, ip.src.12)"-->
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>

<!-- C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="SECURITY" 
    description="SMTP detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="ip check"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_03l : Invalid GRE version detection.
           boolean_expression="(gre.version != 0)"/>
       -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="Invalid GRE version detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="((gre.proto &gt; 0)&amp;&amp;(gre.version != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(ip.src != ip.dst)"/>
</property>

<!-- C4_Analyse_04g : SQL Injection detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP segment"
           boolean_expression="((tcp.payload_len &gt; 0)&amp;&amp;(#check_sql_injection(tcp.p_payload, tcp.payload_len) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(ip.src != ip.dst )"/>
</property>

<!-- C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;(ip.dst != ip.src))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>

<!-- IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!--
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;((((ip.frag_offset - ip.frag_offset.1) &lt; 101)&amp;&amp;ip.src != ip.dst))))"/>
-->

<!-- IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<!-- Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and diffenrences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="" type_property="EVASION" 
    description="HTTP response with no header right after the GET (type 2)"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="((http.method == http.method)&amp;&amp;((ip.src != ip.dst)&amp;&amp;((http.packet_count != 0)&amp;&amp;(tcp.packet_count != 0))))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP response (and also TCP ACK) contains no HTTP header"
         boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;((tcp.packet_count == (tcp.packet_count.1+1))&amp;&amp;(#check_http_response(http.response)==1)))))"/>
</property>

<!-- Clone_id  -->
</beginning>
