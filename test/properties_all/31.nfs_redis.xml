<beginning>
<embedded_functions><![CDATA[
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>
#include "types_defs.h"
#include "hiredis/hiredis.h"
#include <sys/time.h>

static inline int em_check_nfs_redis(const char *p_payload){	
  redisContext *c, *command;
  redisReply *reply;
  
  const char *hostname = "127.0.0.1";
  int port = 6379;
  
  struct timeval timeout = { 1, 500000 }; // 1.5 seconds
  c = redisConnectWithTimeout(hostname, port, timeout);
  if (c == NULL || c->err) {
        if (c) {
            printf("Connection error: %s\n", c->errstr);
            redisFree(c);
        } else {
            printf("Connection error: Impossible to allocate redis context\n");
        }
        exit(0);
    }
  
    /* Let's check what we have inside the list */
    reply = redisCommand(c,"LRANGE multisession.report 0 -1");
    if (reply->type == REDIS_REPLY_ARRAY) {
 		int j=0;
        for (j = 0; j < reply->elements; j++) {
			char probe_report[256];
            char *token;
            strcpy(probe_report, reply->element[j]->str);
            token = strtok(reply->element[j]->str, ",");
            int i = 0;
			while (token != NULL) {
				if (i==1) {
					//check the validity of the report
					struct timeval now;
					gettimeofday(&now, NULL);
					double element_ts = atof(token);
					if (now.tv_sec - element_ts > 300) {
							redisCommand(c,"LREM multisession.report 1 %s", probe_report);//Delete the out-dated report
							i++;
							break;
							}
					}
				if (i==2){
					if (token[0] == ' '){
					break;
					}
					if (strstr(p_payload, token) != NULL){
					redisFree(c);
					return 1;
					}        
					}
				token = strtok(NULL, ",");
				i++;
				}
        }
    }
  redisFree(c);
  return 0;
}
]]></embedded_functions>
<!-- Property 31: Simple multi-session property. Detection of NFS synchronization and then upload (based on two probes) -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="31" type_property="ATTACK" 
    description="Upload a file coming from NFS server (detection based on two probes)">
    <event value="COMPUTE" event_id="1" 
           description="Context: HTTP packet"
           boolean_expression="((ip.src != ip.dst) &amp;&amp; ((http.packet_count != 0) &amp;&amp; (tcp.payload_len != 0)))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP payload contains the file coming from NFS server"
           boolean_expression="(#em_check_nfs_redis(tcp.p_payload) == 1)"/>
</property>
</beginning>
