<beginning>

<!--This rule counts how many packets arrive in interval of time include in [0,100] milliseconds. If the amount of packets that come in that time goes over a threshold decided by the user, then an alert is raised. Note that in order to set the threshold an environment variable called  MMT_SEC_5G_DOS_HTTP2_MS_LIMIT must be declared and set.
If that variable is not declared a default value will be given. POST Method=131

-->
<embedded_functions><![CDATA[
#include <stdlib.h>
#include <mmt_core.h>


#include<math.h>

static unsigned long int limit_5g_dos_http2_per_ms = 0;

void on_load(){
	const char *str = getenv("MMT_SEC_5G_DOS_HTTP2_MS_LIMIT");
	if( str == NULL ){
		mmt_info("Rule 96: no value of MMT_SEC_5G_DOS_HTTP2_MS_LIMIT" );
		limit_5g_dos_http2_per_ms=80;
		
	}
	else
		limit_5g_dos_http2_per_ms = strtoul( str, NULL, 0 );
	mmt_info("Rule 96: set MMT_SEC_5G_DOS_HTTP2_MS_LIMIT=%ld", 
		limit_5g_dos_http2_per_ms );
}

/*
To detect DoS, we group messages by windows of millissecond,
that is, all messages having the same millisecond number will be in the same window.
We then check the number of message in a window to ensure that it is less than the given limit. 
*/
static inline bool em_5g_check_msg_throughput( const void *data ){
	static int last_ms = 0; //current ms window
	static unsigned long int counter = 0; //number of msg in the current ms window
	
	struct timeval *time = (struct timeval *) data;
	// no limit
	if( limit_5g_dos_http2_per_ms == 0 )
		return true;

	int millisecond = round( time->tv_usec / 1000.0 ); //microsecond to millisecond
	
	//new window => reset the counter
	if( last_ms != millisecond ){
		counter = 0;
		last_ms = millisecond;
	}
	
	counter ++;
	if(counter >= limit_5g_dos_http2_per_ms){
		 struct timeval current_time;
		 gettimeofday(&current_time, NULL);

		// Extract seconds and microseconds from the timeval structure
		long seconds = current_time.tv_sec;
		long milliseconds = current_time.tv_usec / 1000;

		printf("Security Timestamp: %ld.%03ld\n", seconds, milliseconds);

	}

	return (counter >= limit_5g_dos_http2_per_ms);
}
]]></embedded_functions>
<property value="THEN" delay_units="ms" delay_min="0" delay_max="100" property_id="106" type_property="ATTACK" 
    description="5G Http2 Flooding Post Recognition">
    <event value="COMPUTE" event_id="1" 
        description="Detected a flooding of HTTP2 Post methods"
        boolean_expression="(( http2.header_method == 131)  &amp;&amp; (ip.src != ip.dst) )"/>

   <event value="COMPUTE" event_id="2" 
        description="Calculate total"
        boolean_expression="( #em_5g_check_msg_throughput( meta.utime ) )"/>
</property>
</beginning>
