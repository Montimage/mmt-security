<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="properties.xsl"?>
<!-- MMT_Security Copyright (C) 2014  Montimage-->
<beginning>
	<!-- Simple multi-session, multi-probe property  ip.src != ip.dst-->
	
<embedded_functions><![CDATA[
int *check_nfs_redis(void *p_payload, void *payload_len){
  int *handle;
  handle = malloc(sizeof(int));
  *handle = 0;
  if((p_payload == NULL) || (payload_len == NULL)){
    return handle;
  }
  
  redisContext *c, *command;
  redisReply *reply;
  
  //const char *hostname = "127.0.0.1";
  const char *hostname = "192.168.0.37";
  int port = 6379;
  
  //take the payload
  uint16_t len = *((uint16_t *)payload_len);
  //printf("Payload length: %"PRIu16"\n", len);
  char *tcp_payload = malloc(len+1);
  memcpy(tcp_payload, p_payload, len);
  tcp_payload[len] = '\0';
  //printf("TCP payload: %s\n", tcp_payload);
  
  struct timeval timeout = { 1, 500000 }; // 1.5 seconds
  c = redisConnectWithTimeout(hostname, port, timeout);
  if (c == NULL || c->err) {
        if (c) {
            printf("Connection error: %s\n", c->errstr);
            redisFree(c);
        } else {
            printf("Connection error: Impossible to allocate redis context\n");
        }
        exit(1);
    }
  
    /* Let's check what we have inside the list */
    reply = redisCommand(c,"LRANGE multisession.report 0 -1");
    if (reply->type == REDIS_REPLY_ARRAY) {
		int j=0;
        for (j = 0; j < reply->elements; j++) {
			//printf("report: %s\n", reply->element[j]->str);
            char f_name[30], probe_report[256];
            char *token;
            strcpy(probe_report, reply->element[j]->str);
            token = strtok(reply->element[j]->str, ",");
            int i = 0;
			while (token != NULL) {
				if (i==1) {
					//check the validity of the report
					struct timeval now;
					gettimeofday(&now, NULL);
					char *_token;
					char timestamp[30];
					strcpy(timestamp, token);
					token = strtok(NULL, ",");
					_token = strtok(timestamp, ".");
					i++;
					if (_token != NULL){
						//printf("Timestamp: %s\n", _token);
						if (now.tv_sec - atoi(_token) > 300) {
							redisCommand(c,"LREM multisession.report 1 %s", probe_report);
							//printf("Delete the outdated report %s\n", probe_report);
							continue;
							}
						}
					}
				if (i==2){
					strcpy(f_name, token);
					//printf("%s\n", f_name);
					}
				token = strtok(NULL, ",");
				i++;
				}
			if (strstr(tcp_payload, f_name) != NULL){
			//printf ("Detected\n");
			*handle = 1;
			return handle;
			}            
        }
    }
  redisFree(c);
  free(tcp_payload);
  return handle;
}
]]></embedded_functions>

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="1" type_property="ATTACK" 
    description="Upload a file comming from NFS server (detection based on two probes)">
    <event value="COMPUTE" event_id="1" 
           description="Context: HTTP packet"
           boolean_expression="((ip.src != ip.dst) &amp;&amp; (http.packet_count != 0))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP payload contains the file comming from NFS server"
           boolean_expression="(#check_nfs_redis(tcp.p_payload, tcp.payload_len) == 1)"/>
</property>
</beginning>
