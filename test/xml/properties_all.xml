<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="properties.xsl"?>
<!-- MMT_Security Copyright (C) 2014  Montimage Description: Detection of attacks in BGPost honeypot-->
<beginning>

<!-- Property 1: Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="1" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.dest_port == 22))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="3" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
</property>

<!-- Property 2: Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="2" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="5" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.dest_port == 22))"/>
      <event value="COMPUTE" event_id="6" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.5)&amp;&amp;(ip.src == ip.dst.5))))"/>
    </operator>
    <event value="COMPUTE" event_id="7" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.5)&amp;&amp;(ip.src == ip.src.5))))"/>
</property>

<!-- Property 3: Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="6" property_id="3" type_property="ATTACK" 
    description="TCP SYN requests on microsoft-ds port 445 with SYN ACK."
    >
    <!--if_not_satisfied="py_createstix(3_BGPOST_TCP_SYN_request_without_SYN_ACK_could_be_a_spoofed_address, ip.src.8)"-->
    <event value="COMPUTE" event_id="8"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.dest_port == 445))"/>
    <event value="COMPUTE" event_id="9" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;(ip.src == ip.dst.8))"/>
</property>

<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->

<!-- Property 4: One ARP request receives two replies with different MAC addresses.-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="5" property_id="4" type_property="ATTACK" 
          description="IPv4 address conflict detection (RFC5227). Possible arp poisoning.">
    <operator value="THEN" delay_units="m" delay_min="0+" delay_max="5">
      <event value="COMPUTE" event_id="10" 
             description="An arp who was requested"
             boolean_expression="(arp.ar_op == 1))"/>
      <event value="COMPUTE" event_id="11" 
             description="An arp reply with MAC address"
             boolean_expression="((arp.ar_op == 2)&amp;&amp;(arp.ar_sip == arp.ar_tip.10))"/>
    </operator>
    <event value="COMPUTE" event_id="12" 
           description="An arp reply but with different MAC address"
           boolean_expression="(((arp.ar_op == 2)&amp;&amp;(arp.ar_sip == arp.ar_tip.10))&amp;&amp;(arp.ar_sha != arp.ar_sha.11))"/>
</property>

<!-- Property 5: Two ARP replies that should provide the same MAC address are different. This rule is simpler than Property 1 
                 above and detects the same potential attacks without generating a message for each combination of request-reply.-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="5" property_id="5" type_property="ATTACK" 
          description="IPv4 address conflict detection (RFC5227). Possible arp poisoning.">
      <event value="COMPUTE" event_id="13" 
             description="An arp reply with MAC address"
             boolean_expression="(arp.ar_op == 2)"/>
    <event value="COMPUTE" event_id="14" 
           description="An arp reply but with different MAC address"
           boolean_expression="(((arp.ar_op == 2)&amp;&amp;(arp.ar_sip == arp.ar_sip.13))&amp;&amp;(arp.ar_sha != arp.ar_sha.14))"/>
</property>


<!-- Property 6: 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="1" property_id="6" type_property="ATTACK" 
    description="4_Analyse_03b : SYN and ACK paquets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="15"
           description="TCP SYN"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst == ip.dst)&amp;&amp;((ip.src == ip.src)&amp;&amp;(tcp.seq_nb == tcp.seq_nb))))"/>
    <event value="COMPUTE" event_id="16" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.15)&amp;&amp;((ip.src == ip.dst.15)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.15) == 791101)||((tcp.seq_nb.15 - tcp.ack_nb) == 791101)))))"/>
</property>

<!-- Property 7: R4_Decod_1a : TCP RST is invalid if there is no corresponding TCP ACK before belonging to the same session.-->
<property value="THEN" delay_units="s" delay_min="-6" delay_max="6" property_id="7" type_property="ATTACK" 
    description="R4_Decod_1a : TCP RST is invalid if there is no corresponding TCP ACK before belonging to the same session.">
    <event value="COMPUTE" event_id="17"
           description="TCP RST"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((ip.dst == ip.dst)&amp;&amp;((ip.src == ip.src)&amp;&amp;((tcp.src_port == tcp.src_port)&amp;&amp;(tcp.dst_port == tcp.dst_port)))))"/>
    <event value="COMPUTE" event_id="18" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.dst.17)&amp;&amp;((ip.src == ip.src.17)&amp;&amp;((tcp.src_port == tcp.src_port.17)&amp;&amp;(tcp.dst_port == tcp.dst_port.17)))))"/>
</property>


<!-- TODO:
R4_Decod_1c et R4_Decod_1d : Using fragroute

C4_Analyse_1a : Il faut quelques regles qui analysent les champs de certains protocoles

C4_Analyse_03a : la fonction de defragmentation detecte un chevauchement des zones de donnees transportees par des fragments IP (attack teardrop)

Autres tentatives sur IP et/ou TCP : depend de la genericite des regles par rapport aux sequences protocolaires generees par les outils (fragroute, etc.)
-->

<!-- Property 8: C4_Analyse_03g : Le champ Options doit etre homogene dans tous les fragments IP.-->
<property value="THEN" delay_units="m" delay_min="0+" delay_max="1" property_id="8" type_property="EVASION" 
    description="C4_Analyse_03g: The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="19" 
           description="IP segment"
           boolean_expression="((ip.mf_flag > 0)&amp;&amp;((ip.options == ip.options)&amp;&amp;((ip.dst == ip.dst)&amp;&amp;(ip.src == ip.src))))"/>
    <event value="COMPUTE" event_id="20" 
           description="IP options"
           boolean_expression="((ip.mf_flag > 0)&amp;&amp;((ip.src == ip.src.20)&amp;&amp;((ip.dst == ip.dst.20)&amp;&amp;(#check_ip_options(ip.options,ip.options.20) == 1))))"/>
</property>

<!-- Property 9: C4_Analyse_03h : La taille minimum d un fragment IP est 28 bytes. Pour un IP fragment de offset 0 c est 40.-->
<property value="THEN" delay_units="m" delay_min="0" delay_max="0" property_id="9" type_property="EVASION" 
    description="C4_Analyse_03h: The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="21" 
           description="IP segment and paquet size"
           boolean_expression="((ip.mf_flag > 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="22" 
           description="IP segment"
           boolean_expression="(ip.mf_flag > 0)"/>
</property>

<!-- Property 10: C4_Analyse_03f : HTTP detecte avec un port different de 80 et 3000.-->
<property value="THEN" delay_units="m" delay_min="0" delay_max="0" property_id="10" type_property="EVASION" 
    description="C4_Analyse_03f : HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="23" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method == http.method)&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="24" 
           description="HTTP packet"
           boolean_expression="(http.method == http.method)"/>
</property>

<!-- Property 11: C4_Analyse_03e : l URI d un paquet HTTP contient des caracteres non authorises.-->
<!-- URN invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="m" delay_min="0" delay_max="0" property_id="11" type_property="EVASION" 
    description="C4_Analyse_03e : HTTP packet URI contains non authorised characteres according to RFC2396 and RFC2234.">
    <event value="COMPUTE" event_id="25" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="25" 
           description="HTTP packet"
           boolean_expression="(http.method == http.method)"/>
</property>

</beginning>
