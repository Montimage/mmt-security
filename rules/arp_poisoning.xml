<beginning>
<embedded_functions><![CDATA[

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>

static inline int check_sql_injection(const void *p_payload, double payload_len){
   int key_word_len = 6;
   char *key_words[6] = {"DROP", "UNION", "SELECT", "CHAR", "DELETE", "INSERT"};
   size_t len = payload_len, i;
   char *str  = malloc( len + 1 );
   memcpy( str, p_payload, len );
   str[ len ] = '\0';
   //Signature based dection begin here. 
   //(using  pattern matching techniques against signatures and 
   //keyword-based stores to identify potentially malicious requests)
   for( i=0; i<key_word_len; i++)
      if( strstr(str, key_words[i]  ) != NULL ){
         free( str );
         return 1;
      }
   
   free( str );
   return 0;
}

]]>
</embedded_functions>


<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->

<!-- Property 1: One ARP request receives two replies with different MAC addresses.
-->

<property value="THEN" delay_units="m" delay_min="0+" delay_max="5" property_id="1" type_property="ATTACK" 
          description="IPv4 address conflict detection (RFC5227). Possible arp poisoning.">
    <operator value="THEN" delay_units="m" delay_min="0+" delay_max="5">
      <event value="COMPUTE" event_id="1" 
             description="An arp who was requested"
             boolean_expression="(arp.ar_op == 1)"/>
      <event value="COMPUTE" event_id="2" 
             description="An arp reply with MAC address"
             boolean_expression="((arp.ar_op == 2)&amp;&amp;(arp.ar_sip == arp.ar_tip.1))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="An arp reply but with different MAC address"
           boolean_expression="(((arp.ar_op == 2)&amp;&amp;(arp.ar_sip == arp.ar_tip.1))&amp;&amp;(arp.ar_sha != arp.ar_sha.2))"/>
</property>

<!-- Property 2: Two ARP replies that should provide the same MAC address are different. This rule is simpler than Property 1 
                 above and detects the same potential attacks without generating a message for each combination of request-reply.
-->

<property value="THEN" delay_units="m" delay_min="0+" delay_max="5" property_id="2" type_property="ATTACK" 
          description="IPv4 address conflict detection (RFC5227). Possible arp poisoning.">
      <event value="COMPUTE" event_id="1" 
             description="An arp reply with MAC address"
             boolean_expression="(arp.ar_op == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="An arp reply but with different MAC address"
           boolean_expression="(((arp.ar_op == 2)&amp;&amp;(arp.ar_sip == arp.ar_sip.1))&amp;&amp;(arp.ar_sha != arp.ar_sha.1))"/>
</property>

</beginning>
