<!-- MMT_Security Copyright (C) 2014  Montimage: All rules (last update in 2017-05-11 16:16:21.337202)-->
<beginning>
<embedded_functions><![CDATA[
//each function name should be prefixed by em_
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>
#include "types_defs.h"
#include "hiredis/hiredis.h"
#include <sys/time.h>
#include "hash_table_str.h"
#include <sqlite3.h> 
#include "hash_table_ipadd.h"
static inline int em_check_URI(const char *uri_str){
  int handle = 0;
  if(uri_str == NULL){
    return 2;
  }
 
  const char *x = uri_str;
  
  //fprintf(stderr, "%s\n",x);
  while (*x != '\0'){
      //octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
      if(*x < 32 || *x == 92 || *x == '"' || *x == '<' || *x == '>' || *x == '[' || *x == ']' || *x == '^' || *x == '`' || *x == '{' || 
         *x == '|' || *x == '}' || *x == '%' || *x > 126) {
              handle = 1;
              break;
      }
      x = x+1;
  }
  //detect directory traversal attack
  char *s0, *s1, *s2, *s3;
  s0 = strstr(uri_str, ".."); //find the first occurrence of string ".." in string
  s1 = strstr(uri_str, "./"); //find the first occurrence of string "./" in string
  s2 = strstr(uri_str, "//"); //find the first occurrence of string "//" in string
  s3 = strstr(uri_str, "/."); //find the first occurrence of string "//" in string
  
  if ((s0 !=NULL) || (s1 !=NULL) || (s2 !=NULL) || (s3 !=NULL))  
   handle = 1;
   
//#ifdef DEBUG
//  fprintf(stderr, "executing check_URI with parameters:h=%d:nb=%u:a1=%o:a2=%o\n", 
//                                           handle, *(char*)(BLOC3+6),*(char*)(BLOC3+9));
//#endif
  return handle;
}
static inline int em_check_nfs_redis(const char *p_payload){	
  redisContext *c, *command;
  redisReply *reply;
  
  const char *hostname = "127.0.0.1";
  int port = 6379;
  
  struct timeval timeout = { 1, 500000 }; // 1.5 seconds
  c = redisConnectWithTimeout(hostname, port, timeout);
  if (c == NULL || c->err) {
        if (c) {
            printf("Connection error: %s\n", c->errstr);
            redisFree(c);
        } else {
            printf("Connection error: Impossible to allocate redis context\n");
        }
        exit(0);
    }
  
    /* Let's check what we have inside the list */
    reply = redisCommand(c,"LRANGE multisession.report 0 -1");
    if (reply->type == REDIS_REPLY_ARRAY) {
 		int j=0;
        for (j = 0; j < reply->elements; j++) {
			char probe_report[256];
            char *token;
            strcpy(probe_report, reply->element[j]->str);
            token = strtok(reply->element[j]->str, ",");
            int i = 0;
			while (token != NULL) {
				if (i==1) {
					//check the validity of the report
					struct timeval now;
					gettimeofday(&now, NULL);
					double element_ts = atof(token);
					if (now.tv_sec - element_ts > 300) {
							redisCommand(c,"LREM multisession.report 1 %s", probe_report);//Delete the out-dated report
							i++;
							break;
							}
					}
				if (i==2){
					if (token[0] == ' '){
					break;
					}
					if (strstr(p_payload, token) != NULL){
					redisFree(c);
					return 1;
					}        
					}
				token = strtok(NULL, ",");
				i++;
				}
        }
    }
  redisFree(c);
  return 0;
}
static inline int em_check_trojan_uri(const char * uri){
   	//printf("Enter the em\n");
   	int handle = 0;
   	//printf("http.uri: %s\n", uri);
	if(search_hash_str(Str2DataItem(uri)->key) != NULL) handle = 1;  
	return handle;
  }
static inline int em_check_nfs_upload(const char * file_name, const char *p_payload){
   //printf("Enter the em\n");
   //find the first occurrence of file_name in p_payload
   return (strstr(p_payload, file_name) != NULL);   
  }  
static inline int em_check_malicious_UA_sqlite(const char * UA){
   	int handle = 0;
   	sqlite3 *db;
    char *zErrMsg = 0;
    int rc;
    char *sql = malloc(sizeof(char) * (strlen(UA) + 64));
    const char* data = "Callback function called";
    /*
    if (strlen(UA) > 255){
    return 2;
    }
    */
    int callback(void *data, int argc, char **argv, char **azColName){
  	if (argc > 0) handle = 1;
	return handle;
	}
    
    rc = sqlite3_open("test/hoa/db_blacklisted_UA.sqlite", &db);
    if( rc ){
      fprintf(stderr, "Can't open database: %s\n", sqlite3_errmsg(db));
      return 2;
      }
  	 /* Create SQL statement */
 	sprintf(sql, "SELECT * FROM blacklisted_UA WHERE UA = \"%s\"", UA);
  // strcat(sql,"\" %s \"",UA); 
   rc = sqlite3_exec(db, sql, callback, (void*)data, &zErrMsg);
   if( rc != SQLITE_OK ){
      fprintf(stderr, "SQL error: %s\n", zErrMsg);
      sqlite3_free(zErrMsg);
   }
   sqlite3_close(db);
   free(sql);
	return handle;
  }
static inline int em_check_sql_injection_ua(const char *str){
   int handle = 0;
   if (str==NULL) return 2;
   
   //Signature based dection begin here. 
   //(using  pattern matching techniques against signatures and 
   //keyword-based stores to identify potentially malicious requests)

   char *s1, *s2, *s3, *s4, *s5, *s6, *s7, *s8, *s9;
   s1 = strstr(str, "DROP");  //find the first occurrence of string "DROP" in string
   s2 = strstr(str, "UNION"); //find the first occurrence of string "UNION" in string
   s3 = strstr(str, "SELECT"); //find the first occurrence of string "SELECT" in string
   s4 = strstr(str, "CHAR"); //find the first occurrence of string "CHAR" in string  
   s5 = strstr(str, "DELETE"); //find the first occurrence of string "CHAR" in string
   s6 = strstr(str, "INSERT"); //find the first occurrence of string "CHAR" in string
   s7 = strchr(str, '\'');    //find the first occurrence of character "'" in string
   s8 = strchr(str, '\"');    //find the first occurrence of character """ in string
   s9 = strstr(str, "--");    //find the first occurrence of string "--" in string
     
   if ((s1 !=NULL)  || (s2 !=NULL)   || (s3 !=NULL) || (s4 !=NULL) || (s5 !=NULL) || (s6 !=NULL) || (s7 !=NULL) || (s8 !=NULL) || (s9 !=NULL)) {
      //printf ("SQL injection detected\n");
      handle = 1;   
   }
  return handle;
}
static inline int em_check_sql_injection(const char *str){
   int handle = 0;
   if (str==NULL) return 2;
   
   //Signature based dection begin here. 
   //(using  pattern matching techniques against signatures and 
   //keyword-based stores to identify potentially malicious requests)

   char *s1, *s2, *s3, *s4, *s5, *s6;
   s1 = strstr(str, "DROP");  //find the first occurrence of string "DROP" in string
   s2 = strstr(str, "UNION"); //find the first occurrence of string "UNION" in string
   s3 = strstr(str, "SELECT"); //find the first occurrence of string "SELECT" in string
   s4 = strstr(str, "CHAR"); //find the first occurrence of string "CHAR" in string  
   s5 = strstr(str, "DELETE"); //find the first occurrence of string "CHAR" in string
   s6 = strstr(str, "INSERT"); //find the first occurrence of string "CHAR" in string
     
   if ((s1 !=NULL)  || (s2 !=NULL)   || (s3 !=NULL) || (s4 !=NULL) || (s5 !=NULL) || (s6 !=NULL))  {
      //printf ("SQL injection detected\n");
      handle = 1;   
   }
  return handle;
}
static inline int em_check_port(int i){
  
  //printf("Port:%d\n", i);
  //according to: 
  //https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
  //and
  //https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt

  if(i<1023) return 0;
  if(i>49151 && i< 65536) return 0;
  if(i>65535) return 1;

  if(i>2193 && i<2197) return 1;
  if(i>4488 && i<4500) return 1;
  if(i>4953 && i<4969) return 1;
  if(i>5569 && i<5573) return 1;
  if(i>5646 && i<5670) return 1;
  if(i>6657 && i<6665) return 1;
  if(i>7491 && i<7500) return 1;
  if(i>7784 && i<7790) return 1;
  if(i>27999 && i<28119) return 1;
  if(i>5554 && i<5558) return 1;
  if(i>5999 && i<6064) return 1;
  if(i>8615 && i<8665) return 1;
  if(i>8801 && i<8804) return 1;
  if(i>8887 && i<8891) return 1;
  if(i>11430 && i<11489) return 1;
  if(i>11623 && i<11720) return 1;
  if(i>27009 && i<27345) return 1;
  if(i>41797 && i<42508) return 1;
  if(i>44444 && i<44544) return 1;
  switch (i) {
    case 78:
    case 79:
    case 100:
    case 106:
    case 787:
    case 1053:
    case 1491:
    case 2662:
    case 3060:
    case 3131:
    case 3145:
    case 3300:
    case 3301:
    case 4045:
    case 4315:
    case 4443:
    case 4967:
    case 5151:
    case 5152:
    case 5162:
    case 5444:
    case 5555:
    case 5556:
    case 6100:
    case 6200:
    case 6501:
    case 8882:
    case 9001:
    case 6632:
    case 7001:
    case 7002:
    case 7005:
    case 7011:
    case 7012:
    case 7501:
    case 7777:
    case 8001:
    case 16000:
    case 49151:
      return 1;
    default:
      return 0;
  }
  return 0;
}
static inline bool em_check_UA( const char *user_agent){
   //find the first occurrence of string "Nikto" in string
   return (strstr(user_agent, "Nikto") != NULL);     
}
static inline int em_check_malicious_UA(const char * UA){
   	int handle = 0;
   	if(search_hash_str(Str2DataItem(UA)->key) != NULL) handle = 1;  
	return handle;
  }
static inline int em_check_botnetcc(const char *ipsrc, const char *ipdst){
	int handle = 0;
	
	//extract ip_src, ip_dst
   	char *ip_src = (char *)malloc(sizeof(char)*16);
   	char *ip_dst = (char *)malloc(sizeof(char)*16);
    sprintf(ip_src,"%d.%d.%d.%d", (unsigned char)ipsrc[0], (unsigned char)ipsrc[1], (unsigned char)ipsrc[2], (unsigned char)ipsrc[3]);
    ip_src[15]='\0';
   	sprintf(ip_dst,"%d.%d.%d.%d", (unsigned char)ipdst[0], (unsigned char)ipdst[1], (unsigned char)ipdst[2], (unsigned char)ipdst[3]);
   	ip_dst[15]='\0';
   	//printf("IP src: %s. IP dst: %s\n", ip_src, ip_dst);
   	//printf("src->key: %ld, src->data:%s\n", (ipStr2DataItem(ip_src))->key, (ipStr2DataItem(ip_src))->data);
	
	
	if((search_hash_ip(ipStr2DataItem(ip_src)->key) != NULL) || (search_hash_ip(ipStr2DataItem(ip_dst)->key) != NULL)) handle = 1;
	
   //free everything before quitting
   free(ip_src);
   free(ip_dst);
   return handle;
}
]]></embedded_functions>
<!-- Property 1: Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="3" property_id="1" type_property="ATTACK" 
    description="Several attempts to connect via ssh (brute force attack). Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="100">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="2">
      <event value="COMPUTE" event_id="3" 
             description="2nd attempt"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="3rd attempt"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
    </operator>
</property>
<!-- Property 2: Attempted to connect via ssh but reseted immediately. Source address is spoofed, infected machine or attacker.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="2" type_property="ATTACK" 
    description="Attempted to connect via ssh but reseted immediately. Source address is either infected machine or attacker (no spoofing is possible).">
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="1">
      <event value="COMPUTE" event_id="1" 
             description="SYN request"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.dest_port == 22))"/>
      <event value="COMPUTE" event_id="2" 
             description="SYN ACK reply"
             boolean_expression="((tcp.flags == 18)&amp;&amp;((tcp.src_port == 22)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;(ip.src == ip.dst.1))))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="RST reset"
           boolean_expression="((tcp.flags == 4)&amp;&amp;((tcp.dest_port == 22)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
</property>
<!-- Property 3: Several TCP SYN requests without SYN ACK. Source address is spoofed, infected machine or attacker. Note: done on port 445.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="3" type_property="SECURITY" 
    description="TCP SYN requests on microsoft-ds port 445 without SYN ACK.">
    <event value="COMPUTE" event_id="1"
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.dest_port == 445)&amp;&amp;(ip.src != ip.dst)))"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN ACK reply"
           boolean_expression="((tcp.flags == 18)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(ip.dst == ip.src.1)))"/>
</property>
<!-- Property 4: One ARP request receives two replies with different MAC addresses.
-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="4" property_id="4" type_property="ATTACK" 
          description="IPv4 address conflict detection (RFC5227). Possible arp poisoning.">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="4">
      <event value="COMPUTE" event_id="1" 
             description="An arp who was requested"
             boolean_expression="((arp.ar_op == 1) &amp;&amp; (ethernet.src != ethernet.dst))"/>
      <event value="COMPUTE" event_id="2" 
             description="An arp reply with MAC address"
             boolean_expression="(((arp.ar_op == 2)&amp;&amp;(arp.ar_sip == arp.ar_tip.1)) &amp;&amp; (ethernet.packet_count &gt; 1))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="An arp reply but with different MAC address"
           boolean_expression="((((arp.ar_op == 2)&amp;&amp;(arp.ar_sip == arp.ar_tip.1))&amp;&amp;(arp.ar_sha != arp.ar_sha.2)) &amp;&amp; (ethernet.packet_count != 0))"/>
</property>
<!-- Property 5: Two ARP replies that should provide the same MAC address are different. This rule is simpler than Property 1 
                 above and detects the same potential attacks without generating a message for each combination of request-reply.
-->

<property value="THEN" delay_units="s" delay_min="0+" delay_max="4" property_id="5" type_property="ATTACK" 
          description="IPv4 address conflict detection (RFC5227). Possible arp poisoning.">
      <event value="COMPUTE" event_id="1" 
             description="An arp reply with MAC address"
             boolean_expression="(arp.ar_op == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="An arp reply but with different MAC address"
           boolean_expression="(((arp.ar_op == 2)&amp;&amp;(arp.ar_sip == arp.ar_sip.1))&amp;&amp;(arp.ar_sha != arp.ar_sha.1))"/>
</property>
<!-- Property 6: 4_Analyse_03b : TCP SYN scan to detect SYNFUL compromise) (|ack - seq| == 0xC123D ou 791101). -->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="6" type_property="EVASION" 
    description="SYN and ACK packets with a 0xC123D delta between TCP sequence numbers (scan done by SYNFUL attack).">
    <event value="COMPUTE" event_id="1"
           description="TCP SYN"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.src)&amp;&amp;(tcp.seq_nb == tcp.seq_nb)))"/>
    <event value="COMPUTE" event_id="2" 
           description="TCP ACK"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((ip.src == ip.dst.1)&amp;&amp;(((tcp.ack_nb - tcp.seq_nb.1) == 791101)||((tcp.seq_nb.1 - tcp.ack_nb) == 791101)))))"/>
</property>
<!-- Property 7: TCP RST is invalid if there is no corresponding TCP ACK (tcp.flags == 16) before belonging to the same session containing correct seq_nb and ack_nb .-->
<property value="BEFORE" delay_units="s" delay_min="0+" delay_max="1" property_id="7" type_property="ATTACK" 
    description="R4_Decod_1a : TCP RST is invalid: there is no corresponding TCP ACK before belonging to the same session containing correct seq_nb and ack_nb.">
    <event value="COMPUTE" event_id="1"
           description="Context: TCP RST"
           boolean_expression="((tcp.rst == 1)&amp;&amp;((tcp.seq_nb == tcp.seq_nb)&amp;&amp;((tcp.ack_nb.2 != tcp.seq_nb)&amp;&amp;((ip.src.2 == ip.dst)&amp;&amp;(ip.dst.2 == ip.src)))))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: the last TCP ACK packets have different seg_nb and ack_nb"
           boolean_expression="((tcp.flags == 16)&amp;&amp;((tcp.ack_nb == tcp.ack_nb)&amp;&amp;((tcp.seq_nb == tcp.seq_nb)&amp;&amp;(ip.src != ip.dst))))"/>
</property>
<!-- Property 8: The field Options must be homogeneous in every IP fragments
-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="100" property_id="8" type_property="EVASION" 
    description="The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="(ip.ip_frag_packets_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="Other IP segment with different ip.options"
           boolean_expression="((ip.ip_frag_packets_count == ip.ip_frag_packets_count.1 +1)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.options != ip.options.1))))"/>
</property>
<!-- Property 9: C4_Analyse_03h : The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.-->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="9" type_property="EVASION" 
    description="The minimum size of an IP fragment is 28 bytes and for an IP fragment with offset 0 it is 40.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment and packet size"
           boolean_expression="((ip.mf_flag &gt; 0)&amp;&amp;((ip.tot_len &lt; 28)||((ip.frag_offset == 0)&amp;&amp;(ip.tot_len &lt; 40))))"/>
    <event value="COMPUTE" event_id="2" 
           description="IP segment"
           boolean_expression="(1)"/>
</property>
<!-- Property 10: HTTP using a port different from 80 and 8080.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="10" type_property="EVASION" 
    description="HTTP using a port different from 80 and 8080.">
    <event value="COMPUTE" event_id="1" 
        description="HTTP packet using a port different from 80 and 8080"
           boolean_expression="((http.method != '')&amp;&amp;((tcp.dest_port != 80)&amp;&amp;(tcp.dest_port != 8080)))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>
<!-- Property 11: La taille d un IP incorrect (tronque).-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="11" type_property="EVASION" 
    description="IP packet size incorrect">
    <event value="COMPUTE" event_id="1" 
           description="Packet size incorrect"
           boolean_expression="((meta.packet_len &lt; 34)"/>
    <event value="COMPUTE" event_id="2" 
           description="Ethernet packet"
           boolean_expression="(ethernet.proto == ethernet.proto)"/>
</property>
<!-- Property 12: C4_Analyse_03c|d|e : HTTP packet URI contains non authorized characters according to RFC2396 and RFC2234 or possibly directory traversal attack.-->
<!-- URI invalid character set:
     octets 0-32 (0-20 hex) | "\" | """ | "&" | "<" | ">" | "[" | "]" | "^" | "`" | "{" | "|" | "}" | "~" | octets 127-255 (7F-FF hex)
-->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="12" type_property="EVASION" 
    description="HTTP packet URI contains non authorized characters according to RFC2396 and RFC2234 or possibly directory traversal attack.">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI invalid"
           boolean_expression="((http.method == http.method)&amp;&amp;(#em_check_URI(http.uri) == 1))"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP packet"
           boolean_expression="(1)"/>
</property>
<!-- Property 13: C4_Analyse_3b : Data in SYN packet.-->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="13" type_property="EVASION" 
    description="Data in SYN packet.">
      <event value="COMPUTE" event_id="1" 
             description="SYN request with data"
             boolean_expression="((tcp.flags == 2)&amp;&amp;(tcp.payload_len &gt; 0))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP addresses"
             boolean_expression="(ip.src != ip.dst)"/>
</property>
<!-- Property 14: C4_Analyse_3f bis: Unauthorized port number.-->
<!--              according to: 
                       https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
                  and
                       https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
-->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="14" type_property="EVASION" 
    description="C4_Analyse_3f bis: Unauthorized port number.">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with non-authorized port number."
             boolean_expression="(((tcp.dest_port == tcp.dest_port)&amp;&amp;(tcp.src_port == tcp.src_port))&amp;&amp;((#em_check_port(tcp.dest_port) == 1)||(#em_check_port(tcp.src_port) == 1)))"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet"
             boolean_expression="((tcp.dest_port == tcp.dest_port)&amp;&amp;(tcp.src_port == tcp.src_port))"/>
</property>
<!-- Property 15: Web scan with Nikto. User-Agent based detection-->

<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="15" type_property="ATTACK" 
     description="Nikto detection" >
   <event event_id="1" value="COMPUTE" 
           description="Context: an user agent in the HTTP header"
           boolean_expression="((http.method != '') &amp;&amp; (http.user_agent != ''))"/>
   <event event_id="2" value="COMPUTE" 
           description="Trigger: Nikto detected. "
           boolean_expression="(#em_check_UA(http.user_agent) == 1)"/>
 </property>

<!-- Property 16: Two successive TCP SYN requests but with different destination addresses.-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="200" property_id="16" type_property="ATTACK" 
    description="Two successive TCP SYN requests but with different destination addresses.">
    <event value="COMPUTE" event_id="1" 
           description="SYN request"
           boolean_expression="(tcp.flags == 2)"/>
    <event value="COMPUTE" event_id="2" 
           description="SYN request"
           boolean_expression="((tcp.flags == 2)&amp;&amp;((ip.dst != ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
</property>
<!-- Property 17: C4_Decod_01 : SMTP detection.-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="17" type_property="ATTACK" 
    description="SMTP detected">
   <event value="COMPUTE" event_id="1" 
           description="SMTP packet"
           boolean_expression="(smtp.packet_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="IP addresses"
           boolean_expression="(ip.src != ip.dst)"/>
</property>
<!-- Property 18: C4_Analyse_03l : Invalid GRE version detection.-->

<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="18" type_property="ATTACK" 
    description="Invalid GRE version detected">
   <event value="COMPUTE" event_id="1" 
           description="Context: Gre protocol"
           boolean_expression="(gre.proto &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: Invalid GRE version"
           boolean_expression="(1)"/>
</property>
<!-- Property: SQL Injection detection.-->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="19" type_property="ATTACK" 
    description="SQL Injection detected"
    >
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a TCP packet (it can be regrouped from IP segments)"
           boolean_expression="(tcp.payload_len &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: SQL Injection in the payload"
           boolean_expression="(#em_check_sql_injection(tcp.p_payload) == 1)"/>
</property>
<!-- Property 20: C4_Analyse_04i: ICMP redirect flood detection-->
<!-- Depending on OS implementation, these host based routes can have the characteristic of being short lived.  
Solaris implements aggressive aging where redirects will only last for a specified amount of time.  
Each redirect is given a short lifetime value and will be automatically removed from the routing table when the timer expires.   
This is to ensure that redirects do not remain the routing table indefinitely at the risk of further sub optimal routing.  
In BSD networking code, redirects will be removed if they are being used by TCP and only after the fourth consecutive retransmission attempt.  
Routed and Gated perform similar forms of redirect expiration.  
Since ICMP redirects are dynamic and may not reflect the most current topology 
it is nice to have an automated method of redirect expiration.
-->

<property value="THEN" delay_units="s" delay_min="0" delay_max="6" property_id="20" type_property="ATTACK" 
    description="4 consecutive ICMP redirect packets. Possibly ICMP redirect flood."
    >
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="1" 
           description="Context: ICMP redirect"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst)&amp;&amp;(ip.src == ip.src)))"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: 2nd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
   <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
   <event value="COMPUTE" event_id="3" 
           description="Trigger: 3rd consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   <event value="COMPUTE" event_id="4" 
           description="Trigger: 4th consecutive ICMP redirect packet"
           boolean_expression="((icmp.type == 5)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
   </operator>
</property>
<!-- Property 21: IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="21" type_property="EVASION" 
    description="IP fragmentation : fragments with offset always = 0 (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment with offset = 0 followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset = 0"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset == 0)&amp;&amp;(ip.src != ip.dst)))"/>
</property>
<!-- Property 22: IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="22" type_property="EVASION" 
    description="IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>
<!-- Property 23: Out of order IP fragmentation.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="23" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>
<!-- Property 24: Overlapping IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="24" type_property="EVASION" 
    description="Overlapping IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and differences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &gt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset - ip.frag_offset.1) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>
<!-- Property 25: Overlapping unordered IP fragmentation : difference in offset of concomitant fragments < fragment length (allowed but could be an evasion).-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="25" type_property="EVASION" 
    description="Overlapping unordered IP fragmentation : difference in offset of concomitant fragments less than fragment length (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and differences in offsets less than length"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; ip.tot_len)&amp;&amp;(ip.src != ip.dst))))"/>
</property>
<!-- Property 26: Probable IP protocol scan (4 different attempts in a row on different protocols).
-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="20" property_id="26" type_property="ATTACK" 
    description="Probable IP protocol scan (4 different attempts in a row on different protocols)."
    >
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="1" 
          description="IP packet header with the eight-bit IP protocol field set (1)"
             boolean_expression="((ip.proto_id != 0)&amp;&amp;(ip.src != ip.dst))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP packet header with another eight-bit IP protocol field set (2)"
             boolean_expression="((ip.proto_id != ip.proto_id.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))"/>
    </operator>
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="3" 
             description="IP packet header with another eight-bit IP protocol field set (3)"
             boolean_expression="((ip.proto_id != ip.proto_id.2)&amp;&amp;((ip.proto_id != ip.proto_id.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
      <event value="COMPUTE" event_id="4" 
             description="IP packet header with another eight-bit IP protocol field set (4)"
             boolean_expression="((ip.proto_id != ip.proto_id.3)&amp;&amp;((ip.proto_id != ip.proto_id.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
    </operator>
</property>
<!-- Property 27: Probable UDP protocol scan (4 different attempts in a row on different ports).
-->

<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="27" type_property="ATTACK" 
    description="Probable UDP protocol scan (4 different attempts in a row on different ports)."
    >
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="1" 
             description="UDP packet header with a destination port field set (1)"
             boolean_expression="((ip.proto_id == 17)&amp;&amp;((udp.dest_port != 0)&amp;&amp;(ip.src != ip.dst)))"/>
      <event value="COMPUTE" event_id="2" 
             description="UDP packet header with another destination port field set (2)"
             boolean_expression="((ip.proto_id == 17)&amp;&amp;((udp.dest_port != udp.dest_port.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1))))"/>
    </operator>
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="3" 
             description="UDP packet header with another destination port field set (3)"
             boolean_expression="((ip.proto_id == 17)&amp;&amp;((udp.dest_port != udp.dest_port.2)&amp;&amp;((udp.dest_port != udp.dest_port.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))))"/>
      <event value="COMPUTE" event_id="4"
             description="UDP packet header with another destination port field set (4)"
             boolean_expression="((ip.proto_id == 17)&amp;&amp;((udp.dest_port != udp.dest_port.3)&amp;&amp;((udp.dest_port != udp.dest_port.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.src == ip.src.1)))))"/>
    </operator>
</property>
<!-- Property 28: XMAS s00can : TCP with all flags FIN, URG, PSH active.-->
    <property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="28" type_property="ATTACK"
         description="XMAS scan : TCP with all flags FIN, URG, PSH active.">
    <event value="COMPUTE" event_id="1"
         description="TCP packet with flag FIN active"
         boolean_expression="(tcp.urg == 1)"/>
    <event value="COMPUTE" event_id="2"
         description="TCP packet with flags URG and PSH active"
         boolean_expression="((tcp.fin == 1)&amp;&amp;(tcp.psh == 1))"/>
    </property>
<!-- Property 29: Evasion based on HTTP version 0.9 detection-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="500" property_id="29" type_property="SECURITY" 
    description="There must be HTTP response after HTTP GET. Otherwise, there could be an evasion based on HTTP version 0.9 ((HTTP response with no header) )">
   <event value="COMPUTE" event_id="1" 
           description="Context: Here it is a HTTP GET packet"
           boolean_expression="(http.method == 'GET')"/>
   <event value="COMPUTE" event_id="2" 
           description="Trigger: There must be a HTTP response after that"
		   boolean_expression="((ip.src == ip.dst.1)&amp;&amp;((ip.dst == ip.src.1)&amp;&amp;((http.packet_count == (http.packet_count.1 +1))&amp;&amp;(http.response==http.response))))"/>
</property>
<!-- Property 30: Simple multi-session property. Detection of NFS synchronization and then upload -->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="20" property_id="30" type_property="ATTACK" 
	description="NFS synchronization and then upload">
    <event value="COMPUTE" event_id="1" 
           description="NFS synchronization"
           boolean_expression="(nfs.file_name != '')"/> 
    <event value="COMPUTE" event_id="2" 
           description="Upload the same file"
           boolean_expression="((ip.dst == ip.src.1)&amp;&amp;((http.packet_count != 0)&amp;&amp;(#strstr(tcp.p_payload, nfs.file_name.1) != 0)))"/>
</property>
<!-- Property 31: Simple multi-session property. Detection of NFS synchronization and then upload (based on two probes) -->
<property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="31" type_property="ATTACK" 
    description="Upload a file coming from NFS server (detection based on two probes)">
    <event value="COMPUTE" event_id="1" 
           description="Context: HTTP packet"
           boolean_expression="((ip.src == ip.server_addr) &amp;&amp; ((http.packet_count != 0) &amp;&amp; (tcp.payload_len != 0)))"/>
    <event value="COMPUTE" event_id="2" 
           description="Trigger: HTTP payload contains the file coming from NFS server"
           boolean_expression="(#em_check_nfs_redis(tcp.p_payload) == 1)"/>
</property>
<!-- Property 32: Botnet Command and Control detection based on blacklisted IP addresses. 
This rule replaces 299 Suricata rules and covers 12835 blacklisted IP addr. 
NOTE: MMT_Security must run with -b option -->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="32" type_property="ATTACK" 
    description="Botnet Command and Control detection"
    >
   <event value="COMPUTE" event_id="1" 
           description="IP source or IP dest is a bot"
           boolean_expression="(#em_check_botnetcc(ip.src, ip.dst) == 1)"/>
    <event value="COMPUTE" event_id="2" 
           description="IP packet"
           boolean_expression="(ip.src != ip.dst)"/>
</property>
<!-- Property 33: TROJAN detection based on the hash table of 978 blacklisted http_uri (978 rules)
(Ref: Suricata rules emerging-trojan.rules). 
NOTE: MMT_Security must run with -b option  -->

<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="33" type_property="ATTACK" 
    description="Trojan detection">
    <event value="COMPUTE" event_id="1" 
           description="HTTP URI"
           boolean_expression="(#em_check_trojan_uri(http.uri) == 1)"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP GET"
           boolean_expression="(http.method == 'GET')"/> 
</property>
<!-- Property 34: Detection of DoS attack based on HTTP User-Agent field.-->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="34" type_property="ATTACK" 
    description="Detection of DoS attack based on HTTP User-Agent field">
    <event value="COMPUTE" event_id="1" 
           description="Too long HTTP User-Agent string. Possibly DoS attack."
           boolean_expression="(#strlen(http.user_agent) > 256)"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP GET"
           boolean_expression="(http.method == 'GET')"/> 
</property>
<!-- Property 35: SQL Injection detection in HTTP User-Agent strings.-->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="35" type_property="ATTACK" 
    description="SQL Injection detection in HTTP User-Agent strings">
    <event value="COMPUTE" event_id="1" 
           description="SQL syntax found in HTTP User-Agent string"
           boolean_expression="(#em_check_sql_injection_ua(http.user_agent) == 1)"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP GET"
           boolean_expression="(http.method == 'GET')"/> 
</property>
<!-- Property 36: Detection of robot, crawler, spider, spam and bad bot based on blacklisted User-Agent strings (hash-table). 528 signatures from the source: http://www.user-agents.org/ -->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="36" type_property="ATTACK" 
    description="Detection of robot, crawler, spider, spam and bad bot based on blacklisted User-Agent strings (hash-table)">
    <event value="COMPUTE" event_id="1" 
           description="HTTP User-Agent string representing robot, crawler, spider, spam and bad bot"
           boolean_expression="(#em_check_malicious_UA(http.user_agent) == 1)"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP GET"
           boolean_expression="(http.method == 'GET')"/> 
</property>
<!-- Property 37: Detection of robot, crawler, spider, spam and bad bot based on blacklisted User-Agent strings (hash-table). 528 signatures from the source: http://www.user-agents.org/ -->
<!-- Attention: Compile this rule with -lsqlite3 option. E.g., ./compile_rule rules/rule.so test/properties_all/37.robot.user_agent.xml -lsqlite3  -->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="37" type_property="ATTACK" 
    description="Detection of robot, crawler, spider, spam and bad bot based on blacklisted User-Agent strings (hash-table)">
    <event value="COMPUTE" event_id="1" 
           description="HTTP User-Agent string representing robot, crawler, spider, spam and bad bot"
           boolean_expression="(#em_check_malicious_UA_sqlite(http.user_agent) == 1)"/>
    <event value="COMPUTE" event_id="2" 
           description="HTTP GET"
           boolean_expression="(http.method == 'GET')"/> 
</property>
</beginning>
